// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type AccessPoliciesStatus struct {
	Options *string `json:"options,omitempty"`
}

type AdvancedOptionsStatus struct {
	Options map[string]*string `json:"options,omitempty"`
}

type AdvancedSecurityOptions struct {
	Enabled                     *bool              `json:"enabled,omitempty"`
	InternalUserDatabaseEnabled *bool              `json:"internalUserDatabaseEnabled,omitempty"`
	SAMLOptions                 *SAMLOptionsOutput `json:"sAMLOptions,omitempty"`
}

type AdvancedSecurityOptionsInput struct {
	Enabled                     *bool              `json:"enabled,omitempty"`
	InternalUserDatabaseEnabled *bool              `json:"internalUserDatabaseEnabled,omitempty"`
	MasterUserOptions           *MasterUserOptions `json:"masterUserOptions,omitempty"`
	SAMLOptions                 *SAMLOptionsInput  `json:"sAMLOptions,omitempty"`
}

type AdvancedSecurityOptionsStatus struct {
	Options *AdvancedSecurityOptions `json:"options,omitempty"`
}

type CognitoOptions struct {
	Enabled        *bool   `json:"enabled,omitempty"`
	IDentityPoolID *string `json:"identityPoolID,omitempty"`
	RoleARN        *string `json:"roleARN,omitempty"`
	UserPoolID     *string `json:"userPoolID,omitempty"`
}

type CognitoOptionsStatus struct {
	Options *CognitoOptions `json:"options,omitempty"`
}

type CompatibleVersionsMap struct {
	SourceVersion *string `json:"sourceVersion,omitempty"`
}

type DomainEndpointOptions struct {
	CustomEndpoint               *string `json:"customEndpoint,omitempty"`
	CustomEndpointCertificateARN *string `json:"customEndpointCertificateARN,omitempty"`
	CustomEndpointEnabled        *bool   `json:"customEndpointEnabled,omitempty"`
	EnforceHTTPS                 *bool   `json:"enforceHTTPS,omitempty"`
	TLSSecurityPolicy            *string `json:"tlsSecurityPolicy,omitempty"`
}

type DomainEndpointOptionsStatus struct {
	Options *DomainEndpointOptions `json:"options,omitempty"`
}

type DomainInfo struct {
	DomainName *string `json:"domainName,omitempty"`
}

type DomainInformation struct {
	DomainName *string `json:"domainName,omitempty"`
}

type DomainPackageDetails struct {
	DomainName *string `json:"domainName,omitempty"`
}

type EBSOptions struct {
	EBSEnabled *bool   `json:"ebsEnabled,omitempty"`
	IOPS       *int64  `json:"iops,omitempty"`
	VolumeSize *int64  `json:"volumeSize,omitempty"`
	VolumeType *string `json:"volumeType,omitempty"`
}

type EBSOptionsStatus struct {
	Options *EBSOptions `json:"options,omitempty"`
}

type ElasticsearchClusterConfig struct {
	DedicatedMasterCount   *int64               `json:"dedicatedMasterCount,omitempty"`
	DedicatedMasterEnabled *bool                `json:"dedicatedMasterEnabled,omitempty"`
	DedicatedMasterType    *string              `json:"dedicatedMasterType,omitempty"`
	InstanceCount          *int64               `json:"instanceCount,omitempty"`
	InstanceType           *string              `json:"instanceType,omitempty"`
	WarmCount              *int64               `json:"warmCount,omitempty"`
	WarmEnabled            *bool                `json:"warmEnabled,omitempty"`
	WarmType               *string              `json:"warmType,omitempty"`
	ZoneAwarenessConfig    *ZoneAwarenessConfig `json:"zoneAwarenessConfig,omitempty"`
	ZoneAwarenessEnabled   *bool                `json:"zoneAwarenessEnabled,omitempty"`
}

type ElasticsearchClusterConfigStatus struct {
	Options *ElasticsearchClusterConfig `json:"options,omitempty"`
}

type ElasticsearchDomainStatus_SDK struct {
	ARN                         *string                           `json:"arn,omitempty"`
	AccessPolicies              *string                           `json:"accessPolicies,omitempty"`
	AdvancedOptions             map[string]*string                `json:"advancedOptions,omitempty"`
	AdvancedSecurityOptions     *AdvancedSecurityOptions          `json:"advancedSecurityOptions,omitempty"`
	CognitoOptions              *CognitoOptions                   `json:"cognitoOptions,omitempty"`
	Created                     *bool                             `json:"created,omitempty"`
	Deleted                     *bool                             `json:"deleted,omitempty"`
	DomainEndpointOptions       *DomainEndpointOptions            `json:"domainEndpointOptions,omitempty"`
	DomainID                    *string                           `json:"domainID,omitempty"`
	DomainName                  *string                           `json:"domainName,omitempty"`
	EBSOptions                  *EBSOptions                       `json:"ebsOptions,omitempty"`
	ElasticsearchClusterConfig  *ElasticsearchClusterConfig       `json:"elasticsearchClusterConfig,omitempty"`
	ElasticsearchVersion        *string                           `json:"elasticsearchVersion,omitempty"`
	EncryptionAtRestOptions     *EncryptionAtRestOptions          `json:"encryptionAtRestOptions,omitempty"`
	Endpoint                    *string                           `json:"endpoint,omitempty"`
	Endpoints                   map[string]*string                `json:"endpoints,omitempty"`
	LogPublishingOptions        []map[string]*LogPublishingOption `json:"logPublishingOptions,omitempty"`
	NodeToNodeEncryptionOptions *NodeToNodeEncryptionOptions      `json:"nodeToNodeEncryptionOptions,omitempty"`
	Processing                  *bool                             `json:"processing,omitempty"`
	ServiceSoftwareOptions      *ServiceSoftwareOptions           `json:"serviceSoftwareOptions,omitempty"`
	SnapshotOptions             *SnapshotOptions                  `json:"snapshotOptions,omitempty"`
	UpgradeProcessing           *bool                             `json:"upgradeProcessing,omitempty"`
	VPCOptions                  *VPCDerivedInfo                   `json:"vpcOptions,omitempty"`
}

type ElasticsearchVersionStatus struct {
	Options *string `json:"options,omitempty"`
}

type EncryptionAtRestOptions struct {
	Enabled  *bool   `json:"enabled,omitempty"`
	KMSKeyID *string `json:"kmsKeyID,omitempty"`
}

type EncryptionAtRestOptionsStatus struct {
	Options *EncryptionAtRestOptions `json:"options,omitempty"`
}

type LogPublishingOption struct {
	CloudWatchLogsLogGroupARN *string `json:"cloudWatchLogsLogGroupARN,omitempty"`
	Enabled                   *bool   `json:"enabled,omitempty"`
}

type LogPublishingOptionsStatus struct {
	Options []map[string]*LogPublishingOption `json:"options,omitempty"`
}

type MasterUserOptions struct {
	MasterUserARN      *string `json:"masterUserARN,omitempty"`
	MasterUserName     *string `json:"masterUserName,omitempty"`
	MasterUserPassword *string `json:"masterUserPassword,omitempty"`
}

type NodeToNodeEncryptionOptions struct {
	Enabled *bool `json:"enabled,omitempty"`
}

type NodeToNodeEncryptionOptionsStatus struct {
	Options *NodeToNodeEncryptionOptions `json:"options,omitempty"`
}

type OptionStatus struct {
	PendingDeletion *bool `json:"pendingDeletion,omitempty"`
}

type RecurringCharge struct {
	RecurringChargeFrequency *string `json:"recurringChargeFrequency,omitempty"`
}

type ReservedElasticsearchInstance struct {
	CurrencyCode                            *string `json:"currencyCode,omitempty"`
	ElasticsearchInstanceType               *string `json:"elasticsearchInstanceType,omitempty"`
	ReservedElasticsearchInstanceOfferingID *string `json:"reservedElasticsearchInstanceOfferingID,omitempty"`
	State                                   *string `json:"state,omitempty"`
}

type ReservedElasticsearchInstanceOffering struct {
	CurrencyCode              *string `json:"currencyCode,omitempty"`
	ElasticsearchInstanceType *string `json:"elasticsearchInstanceType,omitempty"`
}

type SAMLIDp struct {
	EntityID        *string `json:"entityID,omitempty"`
	MetadataContent *string `json:"metadataContent,omitempty"`
}

type SAMLOptionsInput struct {
	Enabled               *bool    `json:"enabled,omitempty"`
	IDp                   *SAMLIDp `json:"idp,omitempty"`
	MasterBackendRole     *string  `json:"masterBackendRole,omitempty"`
	MasterUserName        *string  `json:"masterUserName,omitempty"`
	RolesKey              *string  `json:"rolesKey,omitempty"`
	SessionTimeoutMinutes *int64   `json:"sessionTimeoutMinutes,omitempty"`
	SubjectKey            *string  `json:"subjectKey,omitempty"`
}

type SAMLOptionsOutput struct {
	Enabled               *bool    `json:"enabled,omitempty"`
	IDp                   *SAMLIDp `json:"idp,omitempty"`
	RolesKey              *string  `json:"rolesKey,omitempty"`
	SessionTimeoutMinutes *int64   `json:"sessionTimeoutMinutes,omitempty"`
	SubjectKey            *string  `json:"subjectKey,omitempty"`
}

type ServiceSoftwareOptions struct {
	AutomatedUpdateDate *metav1.Time `json:"automatedUpdateDate,omitempty"`
	Cancellable         *bool        `json:"cancellable,omitempty"`
	CurrentVersion      *string      `json:"currentVersion,omitempty"`
	Description         *string      `json:"description,omitempty"`
	NewVersion          *string      `json:"newVersion,omitempty"`
	OptionalDeployment  *bool        `json:"optionalDeployment,omitempty"`
	UpdateAvailable     *bool        `json:"updateAvailable,omitempty"`
	UpdateStatus        *string      `json:"updateStatus,omitempty"`
}

type SnapshotOptions struct {
	AutomatedSnapshotStartHour *int64 `json:"automatedSnapshotStartHour,omitempty"`
}

type SnapshotOptionsStatus struct {
	Options *SnapshotOptions `json:"options,omitempty"`
}

type VPCDerivedInfo struct {
	AvailabilityZones []*string `json:"availabilityZones,omitempty"`
	SecurityGroupIDs  []*string `json:"securityGroupIDs,omitempty"`
	SubnetIDs         []*string `json:"subnetIDs,omitempty"`
	VPCID             *string   `json:"vpcID,omitempty"`
}

type VPCDerivedInfoStatus struct {
	Options *VPCDerivedInfo `json:"options,omitempty"`
}

type VPCOptions struct {
	SecurityGroupIDs []*string `json:"securityGroupIDs,omitempty"`
	SubnetIDs        []*string `json:"subnetIDs,omitempty"`
}

type ZoneAwarenessConfig struct {
	AvailabilityZoneCount *int64 `json:"availabilityZoneCount,omitempty"`
}
